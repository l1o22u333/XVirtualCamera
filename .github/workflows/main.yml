# 工作流程的名稱，會顯示在 GitHub Actions 頁面
name: Android CI Build

# --- 觸發條件 ---
on:
  # 當有程式碼被推送到 main 或 master 分支時自動執行
  push:
    branches: [ "main", "master" ]
  # 也允許您在 Actions 頁面手動點擊按鈕來執行
  workflow_dispatch:

# --- 任務定義 ---
jobs:
  build:
    # 指定任務在最新的 Ubuntu 虛擬機上執行
    runs-on: ubuntu-latest

    # --- 步驟定義 ---
    steps:
    # 步驟 1: 將您的專案原始碼下載到虛擬機中
    - name: Checkout code
      uses: actions/checkout@v4

    # 步驟 2: 設定 Java (JDK 17) 環境，這是 Android 編譯所必需的
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: gradle # 啟用 Gradle 快取，加速未來的編譯

    # 步驟 3: 將儲存在 Secrets 中的 Base64 字串解碼，還原成 .jks 金鑰檔案
    # 這是整個簽章流程的關鍵一步
    - name: Decode Keystore
      env:
        # 從 GitHub Secrets 中讀取金鑰的 Base64 內容
        KEYSTORE_BASE64: ${{ secrets.KEYSTORE_BASE64 }}
      run: |
        echo "從 Secret 解碼金鑰庫檔案..."
        # 使用 base64 工具將文字還原成二進位檔案，並儲存在虛擬機的工作區
        echo $KEYSTORE_BASE64 | base64 --decode > $GITHUB_WORKSPACE/upload-keystore.jks
        echo "金鑰庫檔案已成功建立。"

    # 步驟 4: 賦予 Gradle 包裝器 (gradlew) 執行權限 (在 Linux 系統中為必要操作)
    - name: Grant execute permission for gradlew
      run: chmod +x gradlew

    # 步驟 5: 執行 Gradle 指令來編譯 Release 版的 APK
    - name: Build Release APK
      env:
        # 將所有簽章需要的資訊，透過環境變數安全地傳遞給 Gradle
        # KEYSTORE_PATH 指向我們在上一步驟中建立的 .jks 檔案的絕對路徑
        KEYSTORE_PATH: ${{ github.workspace }}/upload-keystore.jks
        KEYSTORE_PASSWORD: ${{ secrets.KEYSTORE_PASSWORD }}
        KEY_ALIAS: ${{ secrets.KEY_ALIAS }}
        KEY_PASSWORD: ${{ secrets.KEY_PASSWORD }}
      # 執行 'assembleRelease' 任務，這會觸發 Gradle 進行簽章和建構
      run: ./gradlew assembleRelease

    # 步驟 6: 上傳編譯完成的 APK 檔案作為產物 (Artifact)
    - name: Upload Release APK
      uses: actions/upload-artifact@v4
      with:
        # 設定產物的名稱，方便您在下載時辨識
        name: app-release-apk
        # 指定要上傳的檔案路徑，release 版 APK 的標準輸出路徑
        path: app/build/outputs/apk/release/app-release.apk
        # 設定產物的保留天數，5 天後會自動刪除以節省空間
        retention-days: 5000
